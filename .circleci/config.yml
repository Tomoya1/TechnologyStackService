# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2

executors:
  default:
    environment:
      DB_DATABASE: circle_test
      DB_USERNAME: circleci
      DB_PASSWORD: password
      DB_HOST: 127.0.0.1

jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.3.5-fpm
      - image: circleci/mysql:5.7
        environment:
          MYSQL_DATABASE: circle_test
          MYSQL_USER: circleci
          MYSQL_PASSWORD: password
          MYSQL_HOST: 127.0.0.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
#       - image: circleci/mysql:5.7
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "src/composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          command:
            cd src && composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "src/composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "src/package.json" }}
            - node-v1-
#      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "src/package.json" }}
          paths:
            - node_modules

  build_image:
      docker:
        - image: docker:18.09.0
      steps:
        - checkout
        - setup_remote_docker
        - run:
            name: install aws cli
            command: |
              apk add --no-cache --update py-pip
              pip install awscli
        - run:
            name: login ecr
            command: |
              $(aws ecr get-login --no-include-email --region ap-northeast-1)
        - run:
            name: build image php
            command: |
              docker build -t ${ECR_DOMAIN}:$CIRCLE_SHA1 -t ${ECR_DOMAIN}:latest ./docker/php/
        - run:
            name: build image nginx
            command: |
              docker build -t ${ECR_DOMAIN}:$CIRCLE_SHA1 -t ${ECR_DOMAIN}:latest ./docker/nginx/
        - run:
            name: Push docker image php
            command: |
              docker push ${ECR_DOMAIN}:$CIRCLE_SHA1
              docker push ${ECR_DOMAIN}:latest
        - run:
            name: Push docker image nginx
            command: |
              docker push ${ECR_DOMAIN}:$CIRCLE_SHA1
              docker push ${ECR_DOMAIN}:latest
workflows:
  version: 2
  test:
    jobs:
      - build
      - build_image:
          requires:
            - build
          filters:
            branches:
              only: master


      # prepare the database
#      自動テストの設定などはECSが終わってから
#      - run:
#          name: Install MySQL client (PHP)
#          command: |
#            sudo apt-get update
#            sudo apt-get install mysql-client
#            sudo -E docker-php-ext-install mysqli pdo_mysql && sudo -E docker-php-ext-enable mysqli pdo_mysql
#      - run:
#          command: |
#            cd src && php artisan migrate --env=testing --force

      # run tests with phpunit or codecept
#      - run: ./src/vendor/bin/phpunit
#      - run: ./vendor/bin/codecept build
#      - run: ./vendor/bin/codecept run